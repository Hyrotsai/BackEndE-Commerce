openapi: 3.0.3
info:
  title: Practing E-Commerce
  description: |-
    This is my first project back and documenting in yaml be patient

    _lorem ipsum!_

  version: 1.0.0

servers:
  - url: https://localhost:3000/api/v1
tags:
  - name: categories
    description: Category description
  - name: orders
    description: Orders description
  - name: products
    description: Products description
  - name: user
    description: Users description
paths:
  /categories:
    get:
      tags:
        - categories
      summary: Return categories
      description: Return categories
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
            application/xml:
              schema:
                $ref: "#/components/schemas/Category"
        "500":
          description: "false"
    post:
      tags:
        - categories
      summary: Add a new category
      description: Add a new category
      operationId: addCategory
      requestBody:
        description: Create a new category
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
          application/xml:
            schema:
              $ref: "#/components/schemas/Category"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Category"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
            application/xml:
              schema:
                $ref: "#/components/schemas/Category"
        "404":
          description: The category cannot be created!
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /categories/{categoriesId}:
    get:
      tags:
        - categories
      summary: Find category by ID
      description: Returns a single category
      operationId: getPetById
      parameters:
        - name: categoriesId
          in: path
          description: ID of category to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
            application/xml:
              schema:
                $ref: "#/components/schemas/Category"
        "500":
          description: The category with the given ID was not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    put:
      tags:
        - categories
      summary: Updates a category by ID
      description: ""
      operationId: updatePetWithForm
      parameters:
        - name: categoriesId
          in: path
          description: ID of categories that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Category"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
            application/xml:
              schema:
                $ref: "#/components/schemas/Category"
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - categories
      summary: Delete a category by ID
      description: ""
      parameters:
        - name: categoriesId
          in: path
          description: ID of categories that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: The category deleted
        "400":
          description: Category not found!
        "404":
          description: Error Message
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /orders:
    get:
      tags:
        - orders
      summary: Returns orders
      description: Returns orders
      operationId: getInventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "500":
          description: "False"
      security:
        - api_key: []
    post:
      tags:
        - orders
      summary: Create orders
      description: Create orders
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: The order cannot be created!
      security:
        - api_key: []
  /orders/{orderId}:
    get:
      tags:
        - orders
      summary: Find Order order by ID
      description: Return order by ID
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "500":
          description: Order not found
    put:
      tags:
        - orders
      summary: Update order order by ID
      description: Update order order by ID
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be modified
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: The order cannot be created!
    delete:
      tags:
        - orders
      summary: Delete order order by ID
      description: Delete order order by ID
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: The order deleted
        "400":
          description: Error
        "404":
          description: Order not found!
  /orders/get/totalsales:
    get:
      tags:
        - orders
      summary: Returns totalsales
      description: Returns totalsales
      operationId: getInventory2
      responses:
        "200":
          description: totalsales
        "400":
          description: The order sales cannot be generated
      security:
        - api_key: []
  /orders/get/count:
    get:
      tags:
        - orders
      summary: Return count
      description: Return count
      operationId: placeOrder2
      responses:
        "200":
          description: order count
        "500":
          description: "False"
  /orders/get/userorders/{userId}:
    get:
      tags:
        - orders
      summary: Return userOrderList
      description: Return userOrderList
      operationId: getOrderById2
      parameters:
        - name: userId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "500":
          description: "False"
  /products:
    get:
      tags:
        - products
      summary: Return product
      description: Return product
      operationId: createUser
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
            application/xml:
              schema:
                $ref: "#/components/schemas/Product"
        "500":
          description: Error
    post:
      tags:
        - products
      summary: Create product
      description: Create product
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
            application/xml:
              schema:
                $ref: "#/components/schemas/Product"
        "500":
          description: The product connot be created
  /products/{productId}:
    get:
      tags:
        - products
      summary: Return product by ID
      description: Return product by ID
      parameters:
        - name: productId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
            application/xml:
              schema:
                $ref: "#/components/schemas/Product"
        "500":
          description: "False"
    put:
      tags:
        - products
      summary: Update product by ID
      description: Update product by ID
      parameters:
        - name: productId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
            application/xml:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Invalid Product Id
        "401":
          description: Invalid Category
        "402":
          description: Invalid product
        "504":
          description: The product cannot be created!
    delete:
      tags:
        - products
      summary: Delete product by ID
      description: Delete product by ID
      parameters:
        - name: productId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: The product deleted
        "404":
          description: product not found!
        "400":
          description: Error
  /products/get/count:
    get:
      tags:
        - products
      summary: Return product count
      description: Return product count
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
            application/xml:
              schema:
                $ref: "#/components/schemas/Product"
        "500":
          description: "False"
  /products//get/featured/{count}:
    get:
      tags:
        - products
      summary: Return product count
      description: Return product count
      parameters:
        - name: count
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
            application/xml:
              schema:
                $ref: "#/components/schemas/Product"
        "500":
          description: "False"
  /product/gally-image{productId}:
    put:
      tags:
        - orders
      summary: Update image in product by ID
      description: Update image in product by ID
      parameters:
        - name: productId
          in: path
          description: ID of the order that needs to be modified
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
            application/xml:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Invalid Product Id
        "504":
          description: The product cannot be created!
  /users:
    get:
      tags:
        - user
      summary: Return user list
      description: Return user list
      operationId: createUsersWithListInput
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "500":
          description: "False"
  /users/register:
    post:
      tags:
        - user
      summary: Creates a new user
      description: Creates a new user
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: The user cannot be created!
  /users/{usersId}:
    get:
      tags:
        - user
      summary: Return User order by ID
      description: Return User order by ID
      parameters:
        - name: usersId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "500":
          description: The user with the given ID was not found
    put:
      tags:
        - user
      summary: Update user by ID
      description: Update user by ID
      parameters:
        - name: usersId
          in: path
          description: ID of the order that needs to be modified
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: The user cannot be created!
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: The user not found!
        "401":
          description: Password is wrong!
  /user/register:
    post:
      tags:
        - user
      summary: Register user
      description: Register user
      operationId: updateUser
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User created
        "400":
          description: The user cannot be created
  /user/{userId}:
    delete:
      tags:
        - user
      summary: Delete user
      description: Delete user
      parameters:
        - name: userId
          in: path
          description: ID of the order that needs to be modified
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: The user deleted
        "400":
          description: Error
        "404":
          description: user not found!
  /user/get/count:
    get:
      tags:
        - user
      summary: Return User count
      description: Return User count
      responses:
        "200":
          description: User Count
        "500":
          description: "False"
components:
  schemas:
    Category:
      type: object
      properties:
        name:
          type: string
          example: luis
        icon:
          type: string
          example: heart
        color:
          type: string
          format: hexadecimal
          example: 0B4C5F
      xml:
        name: category
    Order-item:
      type: object
      properties:
        quantity:
          type: integer
          format: int64
          example: 100000
        product:
          type: array
          items:
            $ref: "#/components/schemas/Product"
      xml:
        name: order-item
    Order:
      type: object
      properties:
        orderItems:
          type: array
          xml:
            name: product
            wrapped: true
          items:
            $ref: "#/components/schemas/Order-item"
        shippingAddress1:
          type: string
          example: 437 Lytton
        shippingAddress2:
          type: string
          example: Palo Alto
        city:
          type: string
          example: Cartagena
        zip:
          type: string
          example: "94301"
        country:
          type: string
          example: Colombia
        status:
          type: string
          example: Pending
        totalPrice:
          type: string
          example: "150000"
        user:
          type: array
          items:
            $ref: "#/components/schemas/User"
        dateOrdered:
          type: integer
          default: Date.now
      xml:
        name: address
    Product:
      required:
        - name
        - description
        - category
        - countInStock
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          example: Product description
        richDescription:
          type: string
          example: Product richDescription
        image:
          type: string
          default: ""
        images:
          type: array
          xml:
            name: user
            wrapped: true
          items:
            default: ""
        brand:
          type: string
          example: Adidas
          default: ""
        price:
          type: number
          example: 100
        category:
          type: array
          items:
            $ref: "#/components/schemas/Category"
        countInStock:
          type: number
          example: between 0 and 255
        rating:
          type: number
          default: 0
        numReviews:
          type: number
          default: 0
        isFeatured:
          type: boolean
          default: false
        dateCreated:
          type: string
          default: Date.now
      xml:
        name: product
    User:
      required:
        - name
        - email
        - passwordHash
        - phone
        - street
        - apartment
        - city
        - zip
        - country
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        passwordHash:
          type: string
        phone:
          type: string
        isAdmin:
          type: boolean
          default: false
        street:
          type: string
        apartment:
          type: string
        city:
          type: string
        zip:
          type: string
        country:
          type: string
      xml:
        name: user
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Category"
        application/xml:
          schema:
            $ref: "#/components/schemas/User"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
